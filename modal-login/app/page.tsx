"use client";
import {
  useAuthModal,
  useLogout,
  useSigner,
  useSignerStatus,
  useUser,
} from "@account-kit/react";
import { useEffect, useState } from "react";

export default function Home() {
  const user = useUser();
  const { openAuthModal } = useAuthModal();
  const signerStatus = useSignerStatus();
  const { logout } = useLogout();
  const signer = useSigner();

  const [createdApiKey, setCreatedApiKey] = useState(false);

  const [isSubmitting, setIsSubmitting] = useState(false);

  useEffect(() => {
    // User logged out, so reset the state.
    if (!user && createdApiKey) {
      setCreatedApiKey(false);
    }
    // Waiting for user to be logged in.
    if (!user || !signer || !signerStatus.isConnected || createdApiKey) {
      return;
    }

    const submitStamps = async () => {
      const whoamiStamp = await signer.inner.stampWhoami();
      const getOrganizationStamp = await signer.inner.stampGetOrganization();
      console.log({ whoamiStamp, getOrganizationStamp });
      const resp = await fetch("/api/get-api-key", {
        method: "POST",
        body: JSON.stringify({ whoamiStamp, getOrganizationStamp }),
      });
      return (await resp.json()) as { publicKey: string; isNewKey: boolean };
    };

    const createApiKey = async (publicKey: string) => {
      await signer.inner.experimental_createApiKey({
        // Name of the API key (important b/c the server is checks the prefix).
        name: `server-signer-${new Date().getTime()}`,
        // Public key generated by the server.
        publicKey,
        // Configure how long the API key is valid for.
        expirationSec: 60 * 60 * 24 * 62, // 62 days
      });
    };

    submitStamps()
      .then(({ publicKey, isNewKey }) => {
        console.log({ publicKey, isNewKey });
        // If it's not a new key, we are done.
        if (!isNewKey) {
          return;
        }
        // If it is a new key, the client needs to grant access to it.
        return createApiKey(publicKey);
      })
      .then(() => setCreatedApiKey(true));
  }, [createdApiKey, signer, signerStatus.isConnected, user]);

  return (
    <main className="flex min-h-screen flex-col items-center p-24 gap-4 justify-center text-center">
      {signerStatus.isInitializing ? (
        <>Loading...</>
      ) : user ? (
        <div className="flex flex-col gap-2 p-2">
          <p className="text-xl font-bold">Success!</p>
          <p>Logged in as {user.email ?? "anon"}.</p>
          <p>{user.address}</p>

          <button
            className="btn btn-primary mt-6 disabled:opacity-70"
            disabled={!createdApiKey || isSubmitting}
            onClick={async () => {
              const peerId = window.prompt("Enter peer id");
              if (!peerId) {
                return;
              }
              setIsSubmitting(true);
              try {
                const resp = await fetch("/api/register-peer", {
                  method: "POST",
                  body: JSON.stringify({ orgId: user.orgId, peerId }),
                });
                const respJson = await resp.json();
                console.log(respJson);
                window.alert(JSON.stringify(respJson, null, 2));
              } catch (err) {
                console.error(err);
                window.alert(err);
              }
              setIsSubmitting(false);
            }}
          >
            Register Peer
          </button>
          <button
            className="btn btn-primary mt-6 disabled:opacity-70"
            disabled={!createdApiKey || isSubmitting}
            onClick={async () => {
              setIsSubmitting(true);
              try {
                const resp = await fetch("/api/submit-winners", {
                  method: "POST",
                  body: JSON.stringify({ orgId: user.orgId, roundNumber: 0, winners: ["test"] }),
                });
                const respJson = await resp.json();
                console.log(respJson);
                window.alert(JSON.stringify(respJson, null, 2));
              } catch (err) {
                console.error(err);
                window.alert(err);
              }
              setIsSubmitting(false);
            }}
          >
            Submit winner
          </button>
          <button className="btn btn-primary mt-6" onClick={() => logout()}>
            Log out
          </button>
        </div>
      ) : (
        <button className="btn btn-primary" onClick={openAuthModal}>
          Login
        </button>
      )}
    </main>
  );
}
